{"version":3,"file":"static/js/905.a17450ab.chunk.js","mappings":"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","sources":["components/Cast/Cast.jsx","components/MoviePage/MoviePage.jsx","components/MovieDetails/MovieDetails.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { getMovieCredits } from 'components/api';\nimport PropTypes from 'prop-types';\n\nconst Cast = ({ movieId }) => {\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      const { cast } = await getMovieCredits(movieId);\n      setCast(cast);\n    };\n\n    fetchCast();\n  }, [movieId]);\n\n  return (\n    <div>\n      <h1>Cast</h1>\n      {cast.map(actor => (\n        <div key={actor.id}>\n          <img\n            src={`https://image.tmdb.org/t/p/w200${actor.profile_path}`}\n            alt={actor.name}\n          />\n          <p>{actor.name}</p>\n          <p>Character: {actor.character}</p>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nCast.propTypes = {\n  movieId: PropTypes.number.isRequired,\n};\n\nexport default Cast;\n","import PropTypes from 'prop-types';\nimport Cast from 'components/Cast/Cast';\nimport Reviews from 'components/Reviews/Reviews';\nimport { useNavigate } from 'react-router-dom';\n\nconst MoviePage = ({\n  movieDetails,\n  cast,\n  reviews,\n  showCast,\n  showReviews,\n  onToggleCastInfo,\n  onToggleReviewsInfo,\n}) => {\n  const navigate = useNavigate();\n  const handleShowCast = () => {\n    onToggleCastInfo();\n    navigate(`cast`);\n  };\n\n  const handleShowReviews = () => {\n    onToggleReviewsInfo();\n    navigate(`reviews`);\n  };\n\n  return (\n    <div>\n      <h1>{movieDetails.title}</h1>\n      <img\n        src={`https://image.tmdb.org/t/p/w500${movieDetails.poster_path}`}\n        alt={movieDetails.title}\n      />\n      <p>User Score: {movieDetails.vote_average}</p>\n      <p>Overview: {movieDetails.overview}</p>\n      <p>Genres: {movieDetails.genres.map(genre => genre.name).join(', ')}</p>\n\n      <h2>Additional Information</h2>\n\n      <div>\n        <button onClick={handleShowCast}>Show Cast</button>\n        {showCast && <Cast movieId={movieDetails.id} cast={cast} />}{' '}\n      </div>\n\n      <div>\n        <button onClick={handleShowReviews}>Show Reviews</button>\n        {showReviews && (\n          <Reviews movieId={movieDetails.id} reviews={reviews} />\n        )}{' '}\n      </div>\n    </div>\n  );\n};\n\nMoviePage.propTypes = {\n  movieDetails: PropTypes.object.isRequired,\n  cast: PropTypes.array.isRequired,\n  reviews: PropTypes.array.isRequired,\n  showCast: PropTypes.bool.isRequired,\n  showReviews: PropTypes.bool.isRequired,\n  onToggleCastInfo: PropTypes.func.isRequired,\n  onToggleReviewsInfo: PropTypes.func.isRequired,\n};\n\nexport default MoviePage;\n","import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\nimport {\n  getMovieDetails,\n  getMovieCredits,\n  getMovieReviews,\n} from 'components/api';\nimport { useParams } from 'react-router-dom';\nimport MoviePage from 'components/MoviePage/MoviePage';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movieDetails, setMovieDetails] = useState(null);\n  const [cast, setCast] = useState([]);\n  const [reviews, setReviews] = useState([]);\n  const [showCastInfo, setShowCastInfo] = useState(false);\n  const [showReviewsInfo, setShowReviewsInfo] = useState(false);\n\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      const details = await getMovieDetails(movieId);\n      setMovieDetails(details);\n\n      const { cast } = await getMovieCredits(movieId);\n      setCast(cast);\n\n      const { results } = await getMovieReviews(movieId);\n      setReviews(results);\n    };\n\n    fetchMovieDetails();\n  }, [movieId]);\n\n  const handleToggleCastInfo = () => {\n    setShowCastInfo(!showCastInfo);\n  };\n\n  const handleToggleReviewsInfo = () => {\n    setShowReviewsInfo(!showReviewsInfo);\n  };\n\n  return (\n    <div>\n      {movieDetails ? (\n        <MoviePage\n          movieDetails={movieDetails}\n          cast={cast}\n          reviews={reviews}\n          showCast={showCastInfo}\n          showReviews={showReviewsInfo}\n          onToggleCastInfo={handleToggleCastInfo}\n          onToggleReviewsInfo={handleToggleReviewsInfo}\n        />\n      ) : (\n        <p>Loading...</p>\n      )}\n    </div>\n  );\n};\n\nMovieDetails.propTypes = {\n  goBack: PropTypes.func.isRequired,\n};\n\nexport default MovieDetails;\n","import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\nimport { getMovieReviews } from 'components/api';\n\nexport const Reviews = ({ movieId }) => {\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      const { results } = await getMovieReviews(movieId);\n      setReviews(results);\n    };\n\n    fetchReviews();\n  }, [movieId]);\n\n  return (\n    <div>\n      <h1>Reviews</h1>\n      {reviews.length > 0 ? (\n        reviews.map(review => (\n          <div key={review.id}>\n            <p>Author: {review.author}</p>\n            <p>{review.content}</p>\n          </div>\n        ))\n      ) : (\n        <p>We have no reviews for this movie.</p>\n      )}\n    </div>\n  );\n};\n\nReviews.propTypes = {\n  movieId: PropTypes.number.isRequired,\n};\n\nexport default Reviews;\n"],"names":["_ref","movieId","_useState","useState","_useState2","_slicedToArray","cast","setCast","useEffect","fetchCast","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee","_yield$getMovieCredit","_context","prev","next","getMovieCredits","sent","stop","apply","arguments","_jsxs","children","_jsx","map","actor","src","concat","profile_path","alt","name","character","id","movieDetails","reviews","showCast","showReviews","onToggleCastInfo","onToggleReviewsInfo","navigate","useNavigate","title","poster_path","vote_average","overview","genres","genre","join","onClick","Cast","Reviews","useParams","setMovieDetails","_useState3","_useState4","_useState5","_useState6","setReviews","_useState7","_useState8","showCastInfo","setShowCastInfo","_useState9","_useState10","showReviewsInfo","setShowReviewsInfo","fetchMovieDetails","details","_yield$getMovieReview","results","getMovieDetails","getMovieReviews","MoviePage","fetchReviews","length","review","author","content"],"sourceRoot":""}